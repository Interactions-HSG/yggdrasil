openapi: 3.0.0
info:
  description: A platform for hypermedia multi-agent systems (MAS).\

                The endpoints after `artifacts/{id}/...` are under control of the developer programming the artifacts (using annotations).
                We provide a fallback in case the code is not annotated or the artifact is external.
                The endpoints `artifacts/templates/...`, `workspaces` and `workspaces/id` are *fixed* by Yggdrasil.
  version: '0.0' 
  title: Yggdrasil

servers:
  - url: https://localhost:8080

tags:
  - name: environments
    description: Environment abstraction on Yggdrasil, ignored atm...

  - name: workspaces
    description: General operations on workspace abstraction in Yggdrasil.

  - name: workspaces/id
    description: Operations on specific workspace object.

  - name: artifacts
    description: General operations on artifacts as resources and tools dynamically constructed, used, manipulated by agents.

  - name: artifacts/id
    description: Operations on specific artifact object.
    
  - name: artifacts/templates
    description: Operations on artifact templates.

  - name: artifacts/templates/id
    description: Operations on specific artifact template.

  - name: fallbacks
    description: Fallbacks for external artifacts

paths:
  # General artifact endpoint
  /artifacts:
    post:
      tags:
        - artifacts
      summary: Create artifact
      description: Creates user-defined artifact or virtual (pre-programmed) artifact -> depending on the payload
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
            format: string
            enum: [ application/ld+json, text/turtle ]
            default: application/ld+json
        - in: header
          name: slug
          description: ID of the aritfact that gets created, if ID already taken or paramter not given, the sytem generates it
          schema:
            type: string
            format: string
      requestBody:
        description: Artifact to be created formatted as JSON-LD or Turtle
        required: true 
        content:
          application/ld+json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ArtifactPayloadJson'
                - $ref: '#/components/schemas/ArtifactTempCreate'
          text/turtle:
            schema:
              $ref: '#/components/schemas/ArtifactPayloadTurtle'
      responses:
        '201': 
          description: Returns the created artifact
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ArtifactPayloadJson'
            text/turtle:
              schema:
                $ref: '#/components/schemas/ArtifactPayloadTurtle'
        '400':
          description: Bad Request (payload can't be parsed to the internal RDF graph)
        '404':
          description: No template with given id found!
        '500':
          $ref: '#/components/responses/InternalServer'

  # Artifact specific endpoint (ID known)
  /artifacts/{id}:
    put:
      tags: 
        - artifacts/id
      summary: Updates Artifact
      description: Updates the artifact with the given `id`
      parameters:
        - name: id
          in: path
          description: Artifact ID
          required: true 
          schema:
            type: string
        - in: header
          name: Content-Type
          schema:
            type: string
            format: string
            enum: [application/ld+json, text/turtle]
            default: application/ld+json
      requestBody:
        description: Artifact to be created formatted as JSON-LD or Turtle
        required: true 
        content:
          application/ld+json:
            schema:
              $ref: '#/components/schemas/ArtifactPayloadJson'
          text/turtle:
            schema:
              $ref: '#/components/schemas/ArtifactPayloadTurtle'
      responses:
        '200':
          description: Successfuly updated artifact with new description of the artifact
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ArtifactPayloadJson'
            text/turtle:
              schema:
                $ref: '#/components/schemas/ArtifactPayloadTurtle'
        '400':
          description: Bad Request (payload can't be parsed to the internal RDF graph)
        '404':
          description: Artifact with `id` to update not found
        '500':
          $ref: '#/components/responses/InternalServer'
             
    get: 
      tags:
        - artifacts/id
      summary: Get artifact
      description: Gets the artifact with the specified `id`
      parameters:
        - name: id
          in: path
          description: Artifact ID
          required: true
          schema: 
            type: string
        - in: header
          name: Content-Type
          schema:
            type: string
            format: string
            enum: [application/ld+json, text/turtle]
            default: application/ld+json
      responses:
        '200':
          description: Description of the artifact with id `id`
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ArtifactResponseJson'
            text/turtle:
              schema:
                $ref: '#/components/schemas/ArtifactPayloadTurtle'
        '404':
          description: Artifact with `id` not found
        '500':
          $ref: '#/components/responses/InternalServer'
      
    delete:
      tags: 
        - artifacts/id
      summary: Deletes Artifact
      description: Deletes the artifact with the given `id`
      parameters:
        - name: id
          in: path
          description: Artifact ID
          required: true 
          schema:
            type: string
      responses:
        '204':
          description: Successfuly deleted
        '404':
          description: Artifact to delete with id `id` not found
        '500':
          $ref: '#/components/responses/InternalServer'

  # Fallbacks for external artifacts
  /artifacts/{id}/action/{actionName}:
    put:
      tags: 
        - fallbacks
      summary: Fallback to invoke action on external artifact
      parameters: 
        - name: id
          in: path
          description: Artifact ID
          required: true 
          schema:
            type: string
        - name: actionName
          in: path
          description: name of the action to be performed
          required: true
          schema:
            type: string
      requestBody:
        description: Parameters to the action
        required: false 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionPayloadJson'
      responses:
        '200':
          description: Successfuly performed
        '404':
          description: Artifact with Id `id` not found, or action `actionName` on artifact found
        '500':
          $ref: '#/components/responses/InternalServer'

  /artifacts/{id}/properties/{propertyName}:
    get:
      tags:
        - fallbacks
      summary: Fallback to get the value of an observable property on an external artifact
      parameters: 
        - name: id
          in: path
          description: Artifact ID
          required: true 
          schema:
            type: string
        - name: propertyName
          in: path
          description: name of the observable property
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Value of the observable property
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyResponseJson'
        '404':
          description: Artifact with Id `id` not found, or property `propertyName` on artifact found
        '500':
          $ref: '#/components/responses/InternalServer'

  /artifacts/{id}/events:
    post:
      tags:
        - fallbacks
      summary: Fallback to subscribe from artifact events of an external artifact
      parameters: 
        - name: id
          in: path
          description: Artifact ID
          required: true 
          schema:
            type: string
      requestBody:
        description: Callback where to send the event to (depends on the pub/sub framework actually used)
        required: false 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCallbackPayloadJson'
      responses:
        '201':
          description: Subscription successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventSubscriptionPayloadJson'
        '404':
          description: Artifact with Id `id` not found
        '500':
          $ref: '#/components/responses/InternalServer'

  /artifacts/{id}/events/{subscriptionId}:
    delete:
      tags:
        - fallbacks
      summary: Fallback to unsubscribe from artifact events of an external artifact
      parameters: 
        - name: id
          in: path
          description: Artifact ID
          required: true 
          schema:
            type: string
        - name: subscriptionId
          in: path
          description: Subscription ID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Subscription successfully deleted
        '404':
          description: Artifact with Id `id` not found or subscription with `subscriptionId` not found
        '500':
          $ref: '#/components/responses/InternalServer'


  # Artifact templates endpoint
  /artifacts/templates:
    get: 
      tags:
        - artifacts/templates
      summary: Get artifact templates
      description: Returns a list of all available artifact templates on the node
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
            format: string
            enum: [application/ld+json, text/turtle]
            default: application/ld+json
      responses:
        '200':
          description: List of available artifact templates
          content:
            application/ld+json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/ArtifactPayloadJson'
            text/turtle:
              schema:
                $ref: '#/components/schemas/ArtifactPayloadTurtle'
        '500':
          $ref: '#/components/responses/InternalServer'

    post:
      tags: 
        - artifacts/templates
      summary: DEFERRED Create artifact template
      description: DEFERRED Create artifact template
      parameters:
        - in: header
          name: slug
          description: ID of the aritfact that gets created, if ID already taken or paramter not given, the sytem generates it
          schema:
            type: string
            format: string
        - in: header
          name: Content-Type
          schema:
            type: string
            format: string
            enum: [ JS?, someOtherLanguage ]
            default: JS?
      requestBody:
        description: Some representation of template to be created
        required: true 
        content:
          application/ld+json:
            schema:
              type: string

      responses:
        '201':
          description: Successfuly created artifact
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ArtifactPayloadJson'
            text/turtle:
              schema:
                $ref: '#/components/schemas/ArtifactPayloadTurtle'
        '400':
          description: Bad Request
        '500':
          $ref: '#/components/responses/InternalServer'
  
  /artifacts/templates/{id}:
    put:
      tags:
        - artifacts/templates/id
      summary: DEFERRED Update artifact template
      description: Update artifact template with new specification (code)
      parameters: 
        - in: header
          name: Content-Type
          schema:
            type: string
            format: string
            enum: [ JS?, someOtherLanguage ]
            default: JS?
      requestBody:
        description: Some representation of template to be created
        required: true 
        content:
          application/ld+json:
            schema:
              type: string
    get:
      tags:
        - artifacts/templates/id
      summary: Get artifact template
      description: Get representation of artifact template with ID `id`
      parameters:
        - name: id
          in: path
          description: Workspace ID
          required: true 
          schema:
            type: string
        - in: header
          name: Content-Type
          schema:
            type: string
            format: string
            enum: [application/ld+json, text/turtle]
            default: application/ld+json
      responses:
        '200':
          # some code (JS?)
          description: Respresentation of the artifact template
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ArtifactPayloadJson'
            text/turtle:
              schema:
                $ref: '#/components/schemas/ArtifactPayloadTurtle'
        '404':
          description: Template with ID `id` not found
        '500':
          $ref: '#/components/responses/InternalServer'
    delete:
      tags: 
        - artifacts/templates/id
      summary: Deletes artifact template
      description: Deletes the artifact template, what to do with existing artifacts?
      parameters:
        - name: id
          in: path
          description: Workspace ID
          required: true 
          schema:
            type: string
      responses:
        '204':
          description: Successfuly deleted
        '404':
          description: Artifact template not found
        '500':
          $ref: '#/components/responses/InternalServer'

  # Workspaces endpoint
  /workspaces:
    post:
      tags:
        - workspaces
      summary: Create workspace
      description: Creates new workspace trying to fullfil the desired ID
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
            format: string
            enum: [ application/ld+json, text/turtle ]
            default: application/ld+json
        - in: header
          name: slug
          description: ID of the aritfact that gets created, if ID already taken or paramter not given, the sytem generates it
          schema:
            type: string
            format: string
      requestBody:
        description: Workspace to be created formatted as JSON-LD or Turtle
        required: true 
        content:
          application/ld+json:
            schema:
              $ref: '#/components/schemas/WorkspacePayloadJson'
          text/turtle:
            schema:
              $ref: '#/components/schemas/WorkspacePayloadTurtle'
      responses:
        '201': 
          description: Returns the created workspace
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/WorkspacePayloadTurtle'
            text/turtle:
              schema:
                $ref: '#/components/schemas/WorkspacePayloadTurtle'
        '400':
          description: Bad Request (payload can't be parsed to the internal RDF graph)
        '500':
          $ref: '#/components/responses/InternalServer'
    
    get:
      tags: 
        - workspaces
      summary: Get available workspaces
      description: Returns all available workspaces present on the Yggdrasil node
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
            format: string
            enum: [ application/ld+json, text/turtle ]
            default: application/ld+json
      responses:
        '200':
          description: Description of the workpaces with id `id`
          content:
            application/ld+json:
              schema:
                type: object
                properties:
                  workspaces:
                    type: array
                    items: 
                      $ref: '#/components/schemas/WorkspaceResponseJson'       
            text/turtle:
              schema:
                $ref: '#/components/schemas/WorkspacePayloadTurtle'
        '404':
          description: Artifact with `id` not found
        '500':
          $ref: '#/components/responses/InternalServer'

  /workspaces/{id}:
    get:
      tags:
        - workspaces/id
      summary: Get workspace with ID `id`
      parameters:
        - name: id
          in: path
          description: Workspace ID
          required: true 
          schema:
            type: string
        - in: header
          name: Content-Type
          schema:
            type: string
            format: string
            enum: [ application/ld+json, text/turtle ]
            default: application/ld+json
      responses:
          '200':
            description: Description of the workspace with id `id`
            content:
              application/ld+json:
                schema:
                  $ref: '#/components/schemas/WorkspaceResponseJson'
              text/turtle:
                schema:
                  $ref: '#/components/schemas/WorkspacePayloadTurtle'
          '404':
            description: Workspace with `id` not found
          '500':
            $ref: '#/components/responses/InternalServer'

    put: 
      tags: 
        - workspaces/id
      summary: Update Workspace
      description: Updates the workspace with ID 'id'
      parameters:
        - name: id
          in: path
          description: Workspace ID
          required: true 
          schema:
            type: string
        - in: header
          name: Content-Type
          schema:
            type: string
            format: string
            enum: [application/ld+json, text/turtle]
            default: application/ld+json
      requestBody:
        description: Workspace to be created formatted as JSON-LD or Turtle
        required: true 
        content:
          application/ld+json:
            schema:
              $ref: '#/components/schemas/WorkspaceResponseJson'
          text/turtle:
            schema:
              $ref: '#/components/schemas/WorkspacePayloadTurtle'
      responses:
          '200':
            description: Respresentation of the updated workspace of the workspace with id `id`
            content:
              application/ld+json:
                schema:
                  $ref: '#/components/schemas/WorkspacePayloadJson'
              text/turtle:
                schema:
                  $ref: '#/components/schemas/WorkspacePayloadTurtle'
          '400':
            description: Bad Request (payload can't be parsed to the internal RDF graph)
          '404':
            description: Workspace with `id` not found
          '500':
            $ref: '#/components/responses/InternalServer'

    delete:
      tags: 
        - workspaces/id
      summary: Deletes Workspace
      description: Deletes the workspace. Existing artifacts are moved to the `default` workspace
      parameters:
        - name: id
          in: path
          description: Workspace ID
          required: true 
          schema:
            type: string
      responses:
        '204':
          description: Successfuly deleted
        '404':
          description: Workspace to delete with id `id` not found
        '500':
          $ref: '#/components/responses/InternalServer'
    

      
# TODO: add response paylodads with id
components:
  schemas: 
    ArtifactPayloadJson:
      type: object
      properties:
        context:
          type: string
          format: anyContext
          example: http://www.w3.org/ns/td
        properties:
          type: array
          items:
            type: object
            properties:
              name: 
                type: string
                example: ...JSON-LD description of the property
        actions:
          type: array
          items:
            type: object
            properties:
              name: 
                type: string
                example: ...JSON-LD description of the action
        events:
          type: array
          items:
            type: object
            properties:
              name: 
                type: string
                example: ...JSON-LD description of the event
    ArtifactResponseJson:
      type: object
      properties:
        context:
          type: string
          format: anyContext
          example: http://www.w3.org/ns/td
        id:
          type: string
          format: anyURI
          example: art1Id
        properties:
          type: array
          items:
            type: object
            properties:
              name: 
                type: string
                example: ...JSON-LD description of the property
        actions:
          type: array
          items:
            type: object
            properties:
              name: 
                type: string
                example: ...JSON-LD description of the action
        events:
          type: array
          items:
            type: object
            properties:
              name: 
                type: string
                example: ...JSON-LD description of the event
    ArtifactTempCreate:
      type: object
      properties:
        instantiates:
          type: string
          example: temp1Id               

    ArtifactPayloadTurtle:
      type: string
      example: Artifact representation in Turtle

    WorkspacePayloadJson:
      type: object
      properties:
        description:
          type: string
          example: Workspace representing room 101
        artifacts:
          type: array
          items:
            type: string
          example: [art1Id, art2Id, art3Id]
        artifactTemplates:
          type: array
          items:
            type: string
            example: [temp1Id, temp2Id, temp3Id]

    WorkspaceResponseJson:
      type: object
      properties:
        id:
          type: string
          format: anyURI
          example: ws1Id
        description:
          type: string
          example: Workspace representing room 101
        artifacts:
          type: array
          items:
            type: string
          example: [art1Id, art2Id, art3Id]
        artifactTemplates:
          type: array
          items:
            type: string
            example: [temp1Id, temp2Id, temp3Id]

    WorkspacePayloadTurtle:
      type: string
      example: Workspace representation in Turtle

    ActionPayloadJson:
      type: object
      properties:
        param1:
          type: string
          format: anyJsonDataType
          example: value1
        param2:
          type: string
          format: anyJsonDataType
          example: value2

    PropertyPayloadJson:
      type: object
      properties:
        propertyName:
          type: string
          format: anyJsonDataType
          example: value1

    EventCallbackPayloadJson:
      type: object
      properties:
        callbackAddress:
          type: string
          example: Depends on pub/sub framework
    
    EventSubscriptionPayloadJson:
      type: object
      properties:
        subscriptionId:
          type: subId

  responses:
    InternalServer:
      description: Internal Server Error
      
